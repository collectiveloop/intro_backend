Consideraciones:
    a. Para usarlo dentro de los controladores.

        $this->validate($request, [
            'title' => 'bail|required|unique:posts|max:255',
            'body' => 'required',
            'author.description' => 'required',//Una variable dentro de otra
        ]);

    b.Para usarlo de manera global

        use Validator;//para importarlo

        //para usarlo
        $validator = Validator::make([
            'actor'=>$params['user_id']], [
            'actor' => 'required|email',
        ]);

    c. Para evaluar si hubo un error en la validación

        //si es un correo user_id, consultamos su id
        if ($validator->fails()){
            //código de error
        }

        $validator->after(function ($validator) {
            if ($this->somethingElseIsInvalid()) {
                $validator->errors()->add('field', 'Something is wrong with this field!');
            }
        });


    d. Si queremos redireccionar y enviar al siguiente request los mensajes de error

        redirect('register')->withErrors($validator, 'login');//lo llamaremos login
        //en la vista
        $errors->login->first('email')//email está dentro del validator con error. accedemos al 
        primer mensaje de error de email, ya que puede haber tres validaciones para el i falló el varias

    e. Para acceder a todos los errores de manera individual

        $errors = $validator->errors();

        echo $errors->first('email');


    f. Para acceder a los errores con un ciclo y no sólo el primero

        foreach ($errors->get('email') as $message) {
            //
        }

    g. Usando el comodín para acceder a todo

        foreach ($errors->get('attachments.*') as $message) {
            //
        }
        //este es más recomendado
        foreach ($errors->all() as $message) {
            //
        }

    h. Para saber si hay un mensaje para un campo del formulario

        if ($errors->has('email')) {
            //
        }

    i. Para indicarle al validaro los mensajes que debe desplegar

        $messages = [
            'same'    => 'The :attribute and :other must match.',
            'size'    => 'The :attribute must be exactly :size.',
            'between' => 'The :attribute must be between :min - :max.',
            'in'      => 'The :attribute must be one of the following types: :values',
        ];
        $validator = Validator::make($input, $rules, $messages);

        $messages = [
            'email.required' => 'We need to know your e-mail address!',
        ];
        $validator = Validator::make($input, $rules, $messages);

    j. Para trabajar con el archivos de mensajes de validator
        ++ Ubicación del archivo de mensajes para validación resources/lang/xx/validation.php

        ++ Contenido del archivo de mensajes

            'custom' => [
                'email' => [
                    'required' => 'We need to know your e-mail address!',
                ],
            ],

        ++ Si queremos que algunos campos tenga un nombre especial y no necesariamente el nombre con que se programó

        'attributes' => [
            'email' => 'email address',
        ],
    NOTA: verificar el archivo de lenguajes que ya contiene una explicación de esto y está preparado para ser llenado.
    Otro dato importante es qu elo campos de tipo arreglo pueden ser validados y tener sus propios mensajes,
    por ejemplo "email.0"=>"message" o "email.*"=>"message" o "email.*.sub_field"=>"message"

    k. Reglas de validación

        accepted
            The field under validation must be yes, on, 1, or true. This is useful for validating "Terms of Service" acceptance.

        active_url
            The field under validation must have a valid A or AAAA record according to the dns_get_record PHP function.

        after:date
            The field under validation must be a value after a given date. The dates will be passed into the  strtotime PHP function:

                'start_date' => 'required|date|after:tomorrow'
                    Instead of passing a date string to be evaluated by strtotime, you may specify another field to compare against the date:
                'finish_date' => 'required|date|after:start_date'

        alpha
            The field under validation must be entirely alphabetic characters.

        alpha_dash
            The field under validation may have alpha-numeric characters, as well as dashes and underscores.

        alpha_num
            The field under validation must be entirely alpha-numeric characters.

        array
            The field under validation must be a PHP array.

        before:date
            The field under validation must be a value preceding the given date. The dates will be passed into the PHP strtotime function.

        between:min,max
            The field under validation must have a size between the given min and max. Strings, numerics, and files are evaluated in the same fashion as the size rule.

        boolean
            The field under validation must be able to be cast as a boolean. Accepted input are true, false,  1, 0, "1", and "0".

        confirmed
            The field under validation must have a matching field of foo_confirmation. For example, if the field under validation is password, a matching password_confirmation field must be present in the input.

        date
            The field under validation must be a valid date according to the strtotime PHP function.

        date_format:format
            The field under validation must match the given format. You should use either date or date_format when validating a field, not both.

        different:field
            The field under validation must have a different value than field.

        digits:value
            The field under validation must be numeric and must have an exact length of value.

        digits_between:min,max
            The field under validation must have a length between the given min and max.

        dimensions
            The file under validation must be an image meeting the dimension constraints as specified by the rule's parameters:

            'avatar' => 'dimensions:min_width=100,min_height=200'
                Available constraints are: min_width, max_width, min_height, max_height, width, height, ratio.
       
            'avatar' => 'dimensions:ratio=3/2'
                A ratio constraint should be represented as width divided by height. This can be specified either by a statement like 3/2 or a float like 1.5

        distinct
            When working with arrays, the field under validation must not have any duplicate values.
            'foo.*.id' => 'distinct'

        email
            The field under validation must be formatted as an e-mail address.

        exists:table,column
            The field under validation must exist on a given database table.

        Basic Usage Of Exists Rule

            'state' => 'exists:states'
                Specifying A Custom Column Name

            'state' => 'exists:states,abbreviation'
                Occasionally, you may need to specify a specific database connection to be used for the exists query. You can accomplish this by prepending the connection name to the table name using "dot" syntax:

            'email' => 'exists:connection.staff,email'
                If you would like to customize the query executed by the validation rule, you may use the Rule class to fluently define the rule. In this example, we'll also specify the validation rules as an array instead of using the | character to delimit them:

        use Illuminate\Validation\Rule;

        Validator::make($data, [
            'email' => [
                'required',
                Rule::exists('staff')->where(function ($query) {
                    $query->where('account_id', 1);
                }),
            ],
        ]);

        file

        The field under validation must be a successfully uploaded file.


        filled

        The field under validation must not be empty when it is present.


        image

        The file under validation must be an image (jpeg, png, bmp, gif, or svg)


        in:foo,bar,...

        The field under validation must be included in the given list of values.


        in_array:anotherfield

        The field under validation must exist in anotherfield's values.


        integer

        The field under validation must be an integer.


        ip

        The field under validation must be an IP address.


        json

        The field under validation must be a valid JSON string.


        max:value

        The field under validation must be less than or equal to a maximum value. Strings, numerics, and files are evaluated in the same fashion as the size rule.


        mimetypes:text/plain,...

        The file under validation must match one of the given MIME types:

        'video' => 'mimetypes:video/avi,video/mpeg,video/quicktime'
        To determine the MIME type of the uploaded file, the file's contents will be read and the framework will attempt to guess the MIME type, which may be different from the client provided MIME type.


        mimes:foo,bar,...

        The file under validation must have a MIME type corresponding to one of the listed extensions.

        Basic Usage Of MIME Rule

        'photo' => 'mimes:jpeg,bmp,png'
        Even though you only need to specify the extensions, this rule actually validates against the MIME type of the file by reading the file's contents and guessing its MIME type.

        A full listing of MIME types and their corresponding extensions may be found at the following location: https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types


        min:value

        The field under validation must have a minimum value. Strings, numerics, and files are evaluated in the same fashion as the size rule.


        nullable

        The field under validation may be null. This is particularly useful when validating primitive such as strings and integers that can contain null values.


        not_in:foo,bar,...

        The field under validation must not be included in the given list of values.


        numeric

        The field under validation must be numeric.


        present

        The field under validation must be present in the input data but can be empty.


        regex:pattern

        The field under validation must match the given regular expression.

        Note: When using the regex pattern, it may be necessary to specify rules in an array instead of using pipe delimiters, especially if the regular expression contains a pipe character.


        required

        The field under validation must be present in the input data and not empty. A field is considered "empty" if one of the following conditions are true:

        The value is null.
        The value is an empty string.
        The value is an empty array or empty Countable object.
        The value is an uploaded file with no path.

        required_if:anotherfield,value,...

        The field under validation must be present and not empty if the anotherfield field is equal to any value.


        required_unless:anotherfield,value,...

        The field under validation must be present and not empty unless the anotherfield field is equal to any value.


        required_with:foo,bar,...

        The field under validation must be present and not empty only if any of the other specified fields are present.


        required_with_all:foo,bar,...

        The field under validation must be present and not empty only if all of the other specified fields are present.


        required_without:foo,bar,...

        The field under validation must be present and not empty only when any of the other specified fields are not present.


        required_without_all:foo,bar,...

        The field under validation must be present and not empty only when all of the other specified fields are not present.


        same:field

        The given field must match the field under validation.


        size:value

        The field under validation must have a size matching the given value. For string data, value corresponds to the number of characters. For numeric data, value corresponds to a given integer value. For an array, size corresponds to the count of the array. For files, size corresponds to the file size in kilobytes.


        string

        The field under validation must be a string. If you would like to allow the field to also be null, you should assign the nullable rule to the field.


        timezone

        The field under validation must be a valid timezone identifier according to the  timezone_identifiers_list PHP function.


        unique:table,column,except,idColumn

        The field under validation must be unique in a given database table. If the column option is not specified, the field name will be used.

        Specifying A Custom Column Name:

        'email' => 'unique:users,email_address'
        Custom Database Connection

        Occasionally, you may need to set a custom connection for database queries made by the Validator. As seen above, setting unique:users as a validation rule will use the default database connection to query the database. To override this, specify the connection and the table name using "dot" syntax:

        'email' => 'unique:connection.users,email_address'
        Forcing A Unique Rule To Ignore A Given ID:

        Sometimes, you may wish to ignore a given ID during the unique check. For example, consider an "update profile" screen that includes the user's name, e-mail address, and location. Of course, you will want to verify that the e-mail address is unique. However, if the user only changes the name field and not the e-mail field, you do not want a validation error to be thrown because the user is already the owner of the e-mail address.

        To instruct the validator to ignore the user's ID, we'll use the Rule class to fluently define the rule. In this example, we'll also specify the validation rules as an array instead of using the | character to delimit the rules:

        use Illuminate\Validation\Rule;

        Validator::make($data, [
            'email' => [
                'required',
                Rule::unique('users')->ignore($user->id),
            ],
        ]);
        If your table uses a primary key column name other than id, you may specify the name of the column when calling the ignore method:

        'email' => Rule::unique('users')->ignore($user->id, 'user_id')
        Adding Additional Where Clauses:

        You may also specify additional query constraints by customizing the query using the where method. For example, let's add a constraint that verifies the account_id is 1:

        'email' => Rule::unique('users')->where(function ($query) {
            $query->where('account_id', 1);
        })

        url

        The field under validation must be a valid URL.

    l. Para validar un campo si existe solamente, agregar al validador la palabra  sometimes|required|other validations

    ll. Validaciones que se agregan despues de make (funciona como sometimes pero este es más completo)
        $validator = Validator::make($data, [
            'email' => 'required|email',                        
            'games' => 'required|numeric',
        ]);

        validator->sometimes('reason', 'required|max:500', function ($input) {
            return $input->games >= 100;
        });

        $validator->sometimes(['reason', 'cost'], 'required', function ($input) {
            return $input->games >= 200;
        });
    NOTA: inicialmente no hay validación para reason y cost, se invoca sometimes y agregamos condicionales para estos campos,
    pero la condición de sometimes que se debe cumplir para validar es lo expresado en return, si se cumple valida required|max:500 y required

    m. Para validar arreglo de inputs
        $validator = Validator::make($request->all(), [
            'person.*.email' => 'email|unique:users',
            'person.*.first_name' => 'required_with:person.*.last_name',
        ]);

    n. Si se desea usar una validación propia
        Validator::extend('foo', function ($attribute, $value, $parameters, $validator) {
            //AQUI VA NUESTRA LOÓGICA, AL FINAKL HAY QUE DEVOLVER true o false
            return $value == 'foo';
        });

        Validator::extend('foo', 'FooValidator@validate');//se puede invocar a otro método en otra clase






